{"ast":null,"code":"var _jsxFileName = \"/Users/grisha/Sites/weather-for-uncle/src/weather/Card.js\";\nimport React, { Component } from 'react';\nimport '../weather/Card.scss';\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n    const getCelsius = kelvinTemp => {\n      return Math.floor(kelvinTemp - 273.15) + '°C';\n    };\n\n    return (\n      /*#__PURE__*/\n      // пустой тег - реакт фрагмент\n      React.createElement(\"div\", {\n        className: \"card-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 17\n        }\n      }, \"Weather forecast of \", this.props.data.data.city.name + ', ' + this.props.data.data.city.country, \" every 3h\"), this.props.data.data.list.map((item, i) => {\n        let date = new Date(item.dt * 1000); // нужно умножить на тысячу чтоб\n\n        console.log(date);\n\n        while (i < 30) return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"card\",\n          key: item.dt,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"h2\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 33\n          }\n        }, days[date.getDay()]), /*#__PURE__*/React.createElement(\"h2\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 33\n          }\n        }, getCelsius(item.main.temp)), /*#__PURE__*/React.createElement(\"img\", {\n          src: `https://openweathermap.org/img/w/${item.weather[0].icon}.png`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 33\n          }\n        }), /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 33\n          }\n        }, \"Min: \", getCelsius(item.main.temp_min), \" \", /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 77\n          }\n        }, \"Max: \", getCelsius(item.main.temp_max))), /*#__PURE__*/React.createElement(\"p\", {\n          className: \"temp-min\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 33\n          }\n        }, \"Max: \", getCelsius(item.main.temp_max)));\n      }))\n    );\n  }\n\n}\n\nexport default Card;","map":{"version":3,"sources":["/Users/grisha/Sites/weather-for-uncle/src/weather/Card.js"],"names":["React","Component","Card","constructor","props","render","days","getCelsius","kelvinTemp","Math","floor","data","city","name","country","list","map","item","i","date","Date","dt","console","log","getDay","main","temp","weather","icon","temp_min","temp_max"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,sBAAP;;AAEA,MAAMC,IAAN,SAAmBD,SAAnB,CAA6B;AACzBE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAMC,IAAI,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAAb;;AACA,UAAMC,UAAU,GAAIC,UAAD,IAAgB;AAC/B,aAAOC,IAAI,CAACC,KAAL,CAAWF,UAAU,GAAG,MAAxB,IAAkC,IAAzC;AACH,KAFD;;AAIA;AAAA;AACI;AACA;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAA0B,KAAKJ,KAAL,CAAWO,IAAX,CAAgBA,IAAhB,CAAqBC,IAArB,CAA0BC,IAA1B,GAAiC,IAAjC,GAAwC,KAAKT,KAAL,CAAWO,IAAX,CAAgBA,IAAhB,CAAqBC,IAArB,CAA0BE,OAA5F,cADJ,EAEM,KAAKV,KAAL,CAAWO,IAAX,CAAgBA,IAAhB,CAAqBI,IAArB,CAA0BC,GAA1B,CAA8B,CAACC,IAAD,EAAOC,CAAP,KAAa;AACrC,YAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASH,IAAI,CAACI,EAAL,GAAU,IAAnB,CAAX,CADqC,CACD;;AACpCC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;AACA,eAAOD,CAAC,GAAG,EAAX,EAAe,oBACX;AAAK,UAAA,SAAS,EAAC,MAAf;AAAsB,UAAA,GAAG,EAAGD,IAAI,CAACI,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAMf,IAAI,CAACa,IAAI,CAACK,MAAL,EAAD,CAAV,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAMjB,UAAU,CAACU,IAAI,CAACQ,IAAL,CAAUC,IAAX,CAAhB,CAFJ,eAGI;AAAK,UAAA,GAAG,EAAG,oCAAmCT,IAAI,CAACU,OAAL,CAAa,CAAb,EAAgBC,IAAK,MAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAWrB,UAAU,CAACU,IAAI,CAACQ,IAAL,CAAUI,QAAX,CAArB,oBAA4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAWtB,UAAU,CAACU,IAAI,CAACQ,IAAL,CAAUK,QAAX,CAArB,CAA5C,CAJJ,eAKI;AAAG,UAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA+BvB,UAAU,CAACU,IAAI,CAACQ,IAAL,CAAUK,QAAX,CAAzC,CALJ,CADW;AAQjB,OAXJ,CAFN;AAFJ;AAiB0B;;AA5BL;;AA+BG,eAAe5B,IAAf","sourcesContent":["import React, { Component } from 'react'\nimport '../weather/Card.scss'\n\nclass Card extends Component {\n    constructor(props){\n        super(props)\n    }\n\n    render() {\n        const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n        const getCelsius = (kelvinTemp) => {\n            return Math.floor(kelvinTemp - 273.15) + '°C'\n        }\n\n        return (\n            // пустой тег - реакт фрагмент\n            <div className=\"card-container\">\n                <h1>Weather forecast of { this.props.data.data.city.name + ', ' + this.props.data.data.city.country } every 3h</h1>\n                { this.props.data.data.list.map((item, i) => {\n                        let date = new Date(item.dt * 1000) // нужно умножить на тысячу чтоб\n                        console.log(date)\n                        while (i < 30) return(\n                            <div className=\"card\" key={ item.dt }>\n                                <h2>{ days[date.getDay()]}</h2>\n                                <h2>{ getCelsius(item.main.temp) }</h2>\n                                <img src={`https://openweathermap.org/img/w/${item.weather[0].icon}.png`} />\n                                <h3>Min: { getCelsius(item.main.temp_min) } <h3>Max: { getCelsius(item.main.temp_max) }</h3></h3>\n                                <p className=\"temp-min\">Max: { getCelsius(item.main.temp_max) }</p>\n                            </div>\n                    )})}\n                                </div>\n                                )}\n}\n\n                                export default Card"]},"metadata":{},"sourceType":"module"}