{"ast":null,"code":"var _jsxFileName = \"/Users/grisha/Sites/weather-for-uncle/src/weather/Card.js\";\nimport React, { Component } from 'react';\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n    const getCelsius = kelvinTemp => {\n      return Math.floor(kelvinTemp - 273.15) + ' °C';\n    };\n\n    return (\n      /*#__PURE__*/\n      // пустой тег - реакт фрагмент\n      React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 17\n        }\n      }, this.props.data.data.city.name + ', ' + this.props.data.data.city.country), this.props.data.data.list.map(item => {\n        let date = new Date(item.dt * 1000); // нужно умножить на тысячу чтоб\n\n        console.log(date);\n\n        while (i <= 30) return /*#__PURE__*/React.createElement(\"div\", {\n          key: item.dt,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 33\n          }\n        }, getCelsius(item.main.temp)), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 33\n          }\n        }, \"Weather \", item.weather[0].description), /*#__PURE__*/React.createElement(\"h2\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 33\n          }\n        }, days[date.getDay()] + ' ' + date.getFullYear() + ' ' + date.getDate() + ' ' + date.getHours()), /*#__PURE__*/React.createElement(\"img\", {\n          src: `https://openweathermap.org/img/w/${item.weather[0].icon}.png`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 33\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 33\n          }\n        }, \"Min Temp:\", getCelsius(item.main.temp_min)), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 33\n          }\n        }, \"Max Temp:\", getCelsius(item.main.temp_max)));\n      }))\n    );\n  }\n\n}\n\nexport default Card;","map":{"version":3,"sources":["/Users/grisha/Sites/weather-for-uncle/src/weather/Card.js"],"names":["React","Component","Card","constructor","props","render","days","getCelsius","kelvinTemp","Math","floor","data","city","name","country","list","map","item","date","Date","dt","console","log","i","main","temp","weather","description","getDay","getFullYear","getDate","getHours","icon","temp_min","temp_max"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,IAAN,SAAmBD,SAAnB,CAA6B;AACzBE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAMC,IAAI,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,WAAhC,EAA6C,UAA7C,EAAyD,QAAzD,EAAmE,UAAnE,CAAb;;AACA,UAAMC,UAAU,GAAIC,UAAD,IAAgB;AAC/B,aAAOC,IAAI,CAACC,KAAL,CAAWF,UAAU,GAAG,MAAxB,IAAkC,KAAzC;AACH,KAFD;;AAIA;AAAA;AACI;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKJ,KAAL,CAAWO,IAAX,CAAgBA,IAAhB,CAAqBC,IAArB,CAA0BC,IAA1B,GAAiC,IAAjC,GAAwC,KAAKT,KAAL,CAAWO,IAAX,CAAgBA,IAAhB,CAAqBC,IAArB,CAA0BE,OAAxE,CADJ,EAEM,KAAKV,KAAL,CAAWO,IAAX,CAAgBA,IAAhB,CAAqBI,IAArB,CAA0BC,GAA1B,CAA8BC,IAAI,IAAI;AAChC,YAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASF,IAAI,CAACG,EAAL,GAAU,IAAnB,CAAX,CADgC,CACI;;AACpCC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;AACA,eAAOK,CAAC,IAAI,EAAZ,EAAgB,oBACZ;AAAK,UAAA,GAAG,EAAGN,IAAI,CAACG,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAMb,UAAU,CAACU,IAAI,CAACO,IAAL,CAAUC,IAAX,CAAhB,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAaR,IAAI,CAACS,OAAL,CAAa,CAAb,EAAgBC,WAA7B,CAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAMrB,IAAI,CAACY,IAAI,CAACU,MAAL,EAAD,CAAJ,GAAsB,GAAtB,GAA4BV,IAAI,CAACW,WAAL,EAA5B,GAAiD,GAAjD,GAAuDX,IAAI,CAACY,OAAL,EAAvD,GAAwE,GAAxE,GAA8EZ,IAAI,CAACa,QAAL,EAApF,CAHJ,eAII;AAAK,UAAA,GAAG,EAAG,oCAAmCd,IAAI,CAACS,OAAL,CAAa,CAAb,EAAgBM,IAAK,MAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAczB,UAAU,CAACU,IAAI,CAACO,IAAL,CAAUS,QAAX,CAAxB,CALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAc1B,UAAU,CAACU,IAAI,CAACO,IAAL,CAAUU,QAAX,CAAxB,CANJ,CADY;AASlB,OAZJ,CAFN;AAFJ;AAkB0B;;AA7BL;;AAgCG,eAAehC,IAAf","sourcesContent":["import React, { Component } from 'react'\n\nclass Card extends Component {\n    constructor(props){\n        super(props)\n    }\n\n    render() {\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n        const getCelsius = (kelvinTemp) => {\n            return Math.floor(kelvinTemp - 273.15) + ' °C'\n        }\n\n        return (\n            // пустой тег - реакт фрагмент\n            <div>\n                <h1>{ this.props.data.data.city.name + ', ' + this.props.data.data.city.country }</h1>\n                { this.props.data.data.list.map(item => {\n                        let date = new Date(item.dt * 1000) // нужно умножить на тысячу чтоб\n                        console.log(date)\n                        while (i <= 30) return(\n                            <div key={ item.dt }>\n                                <h1>{ getCelsius(item.main.temp) }</h1>\n                                <p>Weather { item.weather[0].description }</p>\n                                <h2>{ days[date.getDay()] + ' ' + date.getFullYear() + ' ' + date.getDate() + ' ' + date.getHours() }</h2>\n                                <img src={`https://openweathermap.org/img/w/${item.weather[0].icon}.png`} />\n                                <p>Min Temp:{ getCelsius(item.main.temp_min) }</p>\n                                <p>Max Temp:{ getCelsius(item.main.temp_max) }</p>\n                            </div>\n                    )})}\n                                </div>\n                                )}\n}\n\n                                export default Card"]},"metadata":{},"sourceType":"module"}